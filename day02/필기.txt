1.스프링 컨테이너란(Spring Container)
-스프링 컨테이너는 자바 객체의 생명 주기를 관리하며,생성된 자바 객체들에게 추가적인 기능을 제공하는 역할을 한다. 여기서 말하는 자바 객체를 스프링에서는 빈(Bean)이라고 한다
-개발자는 객체를 생성하고 소멸할 수 있는데, 스프링 컨테이너가 이 역할을 대신해 줍니다. 즉 ,제어의 흐름을 
외부에서 관리하는 것이다. 또한, 객체들간의 의존 관계를 스프링 컨테이너가 런타임 과정에서 알아서 만들어준다.
-스프링은 실행시 객체들을 담고있는 Container가 있다.

2.MemberController
-생성자에 @Autowired가 있으면 스프링이 연관된 객체를 스프링컨테이너에서 찾아서 넣어준다. 이렇게
객체 의존관계를 외부에서 넣어주는 것을  DI(Dependency Injection), 의존성 주입이라 한다.
-개발자가 직접 주입하는 형식이라면, @Autowired에 의해서 스프링이 주입해준다.
-단일 생성자에 한해 @Autowired를 붙이지 않아도 된다.

3.IoC
-제어역전(IoC,Inversion of Control)
-개발자가 프레임워크의 기능을 호출하는 형태가 아니라 프레임워크가 개발자의 코드를 호출하기 때문에,
개발자는 전체를 직접 구현하지 않고 자신의 코드를 부분적으로 "끼워넣기" 하는 형태로 구현할 수 있다.
이는 개발자로 하여금 구현하고자 하는 특정 분야의 기능에 집중할 수 있도록한다.
-프레임워크가 객체의 생성, 소멸과 같은 라이프 사이클을 관리하며 스프링으로부터 필요한 객체를 얻어올 수도 있다.
-객체의 의존성을 역전시켜 객체간에 결합도를 줄이고 유연한 코드를 작성할 수 있게하여 가독성 및 코드 중복,유지보수를 편하게 할 수 있게 한다.

4. POJO
-Plain Old Java Object, 단순한 자바 오브젝트
-POJO란, 객체 지향적인 원리에 충실하면서 환경과 기술에 종속되지 않고 필요에 따라 재활용될 수 있는 방식으로
설계된 오브젝트를 말한다.
-이러한 POJO에 애플리케이션의 핵심 로직과 기능을 담아 설계하고 개발하는 방법을 POJO프로그래밍 이라고 할 수 있다.

5. Component scan
-Component scan의 대상은 Spring이 scan을 하는 대상이된다.

6.DI의 3가지 방법
-Field Injection(필드주입)
-Setter Injection(수정자 주입)
-Contructor Injection(생성자 주입)

7. JPA
-JPA는는 기존의 반복 코드는 물론이고, 기본적인 SQL도 JPA가 직접 만들어서 실행해준다.
-JPA를 사용하면, SQL과 데이터 중심의 설계에서 객체 중심의 설계로 패러다임을 전환할 수있다.
-JPA를 사용하면 개발 생산성을 크게 높일 수 있다.


8.SOLID
-클린코드로 유명한 로버트 마틴이 좋은 객체지향 설계의 5가지 원칙을 정리함
-SRP: 단일 책임 원칙(Single Responsibility Principle)
	-한 클래스는 하나의 책임만 가져야한다.
	-하나의 책임이라는것은 모호하다.
	-클 수 있고,작을 수 있다.
	-문맥과 상황에 따라 다르다.
	-중요한 기준은 '변경' 변경이 있을때 파급효과가 적으면 단일책임 원칙을 잘 따르는 것

-OCP: 개방 폐쇄 원칙(Open/Closed Principle)
	-확장에는 열려있고, 수정/변경에는 닫혀있다.

-LSP: 리스코프 치환 원칙(Liskov substitution Principle)
	-프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위타입의 인스턴스로 바꿀 수 있다.
	-다형성에서 하위클래스는 인터페이스 규약을 다 지켜야 한다. 
	그래서 다형성을 지원하기 위한 원칙
	인터페이스를 구현한 구현체를 믿고 사용하려면 이 원칙이 필요하다.
	-단순히 컴파일에 성공하는 것을 넘어서는 이야기

-ISP: 인터페이스 분리원칙(Interface Sergregation Principle)
	-특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다
	-자동차 인터페이스와 사용자 클라이언트 인터페이스를 분리하면, 
		서로 수정이 되더라도 영향주지않는다.
	-인터페이스가 명확해지고, 대체 가능성이 높아진다


-DIP: 의존관계 역전 원칙 (Dependency Inversion Principle)
	-프로그래머는 "추상화에 의존해야지, 구체화에 의존하면 안된다"
	-쉽게 이야기해서 구현 클래스에 의존하지 말고 인터페이스에 의존하라는 뜻
	-구현체에 의존하면 변경이 아주 어려워진다.



