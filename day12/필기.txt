1. JPQL 문법
-select m from Member as m where m.age > 18
->Member : 엔티티 속성, 대소문자 구분
	java 클래스는 대소문자를 구문하기 때문
	엔티티이름 사용, 테이블 이름 아님
	엔티티이름을 @Entity(name= "mm") mm으로 수정시,jpql에서도 mm으로  써야한다.
->JPQL 키워드 : select, from, where 대소문자 구문안함

1-1. 집합과 정렬
select  
	count(m)		//회원 수
	sum(m.age),		//나이 합
	avg(m.age),		//평균 나이
	max(m.age),		//최대 나이
	min(m.age)		//최소 나이
from Member m
-group by, having
-order by

1-2. TypeQuery, Query
-TypeQuery : 반환 타입이 "명확"할 때 사용
-Query : 반환 타입이 명확하지 않을 때 사용

TypeQuery<Member> query = em.createQuery("select m from member m",Member.class);

Query query = em.createQuery("select m.username, m.age from Member m");


1-3. 결과조회
-query.getResultList() : 결과가 하나 이상일 때 , 리스트 반환
	->결과가 없으면 빈 리스트 반환
	->빈 collection이 반환되기 때문에 NullPointException에 대한 걱정은 안해도된다.
-query.getSingleResult() : 결과가 정확히 하나(조심), 단일 객체 반환
	->결과가 없으면 :NoResultException
	->결과가 둘 이상이면 : NonUniqueResultException

1-4. 파라미터 바인딩
-이름 기준
	select m from Member m where m.username = :username

	query.setParameter("username", usernameParam);
	
-위치 기준
	select m from Member m where m.username = ?1
	
	query.setParameter(1, usernameParam);


1-5. 프로젝션
-SELECT 절에 조회할 대상을 지정하는 것
-프로젝션 대상: 엔티티, 임베디드 타입, 스칼라 타입(숫자, 문자등 기본 데이터 타
입)
-SELECT m FROM Member m -> 엔티티 프로젝션	//Member 엔티티 조회
-SELECT m.team FROM Member m -> 엔티티 프로젝션    //Member와 관련된 team을 가지고 온다
-SELECT m.address FROM Member m -> 임베디드 타입 프로젝션 	
-SELECT m.username, m.age FROM Member m -> 스칼라 타입 프로젝션
-DISTINCT로 중복 제거

1-6. 여러타입으로 조회

1-7.페이징 API
-JPA는 페이지를 다음 두 API로 추상화
-setFirstResult(int startPosition) : 조회 시작 위치 (0부터 시작)
-setMaxResults(int maxResult) : 조회할 데이터 수
->몇번 째부터 몇건을 가지고 올래?

1-8. 조인
-문법이 객체 스타일로 나간다
-내부조인
->select m from Member m (inner) join m.team t
-외부조인 
->select m from Member m left (outer) join m.team t


	
1-9. 서브쿼리
-From 절의 서브쿼리는 현재 JPQL에서 불가능, 조인으로 풀 수 잇으면 풀어서 해결





2. 설정파일
-properties와 비교했을때 y(a)ml의 장점
->한 눈에 보기에도 가독성이 좋다
->계층 구조로 이해하기 쉽고 쓰기 편하다
	